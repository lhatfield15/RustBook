Chap 1.3: cargo check
Chap 2: 
    prelude
    readline appends, not replaces 
    if you pass a ref without mut its immutable
    Result type is enum, OK & Err
    crates.io
    default int is i32
    shadowing is easy
Chap 3.2
    interger overflow panics in --debug, 2's complement wraps in --release
Chap 3.5
    break counter * 2; //for breaking from a loop and returning the expression
    'counting_up: loop { } // label loop so you can later break out it from an inner loop with
    break 'counting_up;
Chap 4.2
    Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the life of that reference
    if you have a mut ref, only one ref can exist
Chap 4.3
    String = string, str = slice
Chap 5.1
    to make a new struct with only a few diff fields. Be aware - if anything is moved, user1 is invalid
    let user2 = User {
        email: String::from("another@example.com"),
        ..user1
    };

    Tuple structs for naming clarity (Point vs Color)

5.3
    use impl for method on a struct
    automatic referencing and dereferencing
6.1
    enum with type:
        enum IpAddr {
            V4(String),
            V6(String),
        }
    with diff types
         enum IpAddr {
        V4(u8, u8, u8, u8),
        V6(String),
    }

    you can define methods on enums!
    billion dollar mistake - null refs
6.2
    match must cover all possibilites
6.3
    use if let instead of match if you really only care about one branch
        if let Coin::Quarter(state) = coin {
        println!("State quarter from {state:?}!");
    } else {
        count += 1;
    }
7.1
    A crate is the smallest amount of code that the Rust compiler considers at a time
    A crate can come in one of two forms: a binary crate or a library crate
    A package is a bundle of one or more crates that provides a set of functionality

7.3
    pub for structs -> all members private unless otherwise specified
    pub for enum -> all members public 
7.4
    use for a function -> specify parent module for clarity that what you're calling isn't local
    use fot struct/enum -> use whole path
    for conflicting names, specify parent or use as keyword
    pub use = re exporting
    for multiple imports from same crate
        use std::{cmp::Ordering, io};
8.3
    hashmap uses siphash by default to help prevent DoS attacks
9.1 
    Result is for Errors, Option is for non errs
    unwrap() mean panic if not ok
    expect does same thing, but you can put err msg, prefer expect
    use ? for err propogation
10.1
    generics do not run slower than concrete types, because of monomorphization 
10.2
    restriction to note is that we can implement a trait on a type only if either the trait or the type, or both, are local to our crate
    Note that it isn’t possible to call the default implementation of a trait from an overriding implementation of that same method.
    to pass traits
        pub fn notify(item: &impl Summary) {
            println!("Breaking news! {}", item.summarize());    
        }
    or for trait bound 
        pub fn notify<T: Summary>(item: &T) {
            println!("Breaking news! {}", item.summarize());
        }
    when things are complicated
    fn some_function<T, U>(t: &T, u: &U) -> i32
    where
        T: Display + Clone,
        U: Clone + Debug,
    {}
10.3
    rust chooses smaller of lifetimes
    liftime rules (if unspecified):
        1. each param gets its own lifetime
        2. if only 1 input param, it's lifetime is same as output 
        2. if multiple params and one is self, output lifetime is same as self
    all string literals have static lifetime
11.1
    for testing, you'll usually need #[derive(PartialEq, Debug)]
    if you're expecting a panic,     #[should_panic]
11.3 
    you can test private functions
    integration tests go in test directory (same level as src)
    create tests/common/mod.rs so it doesn't show up in output
    keep main.rs basic, put complex stuff in lib.rs
12.5
    $Env:IGNORE_CASE=1;
    Remove-Item Env:IGNORE_CASE

13.1
    closures:
    FnOnce applies to closures that can be called once. All closures implement at least this trait, because all closures can be called. A closure that moves captured values out of its body will only implement FnOnce and none of the other Fn traits, because it can only be called once.
    FnMut applies to closures that don’t move captured values out of their body, but that might mutate the captured values. These closures can be called more than once.
    Fn applies to closures that don’t move captured values out of their body and that don’t mutate captured values, as well as closures that capture nothing from their environment. These closures can be called more than once without mutating their environment, which is important in cases such as calling a closure multiple times concurrently.

13.4 
    iterators are faster than loops
    iterators are a zero cost abstraction